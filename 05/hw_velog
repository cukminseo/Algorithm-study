# BAJ1260
```python
'''
Created by: minseo
Date: 4/11/24
Desc : 백준 BFS, DFS 초보자 필수
Excute time : 588ms(백준)
'''

import sys

from collections import deque

def DFS(node: int):
    dfs_visited[node] = True
    print(node, end = " ")
    for i in range(1, N+1):
        if graph[node][i] and not dfs_visited[i]:
            DFS(i)

def BFS():
    # 큐가 빌때까지 시행
    while bfs_queue:
        here = bfs_queue.popleft()
        bfs_visited[here] = True
        print(here, end = " ")
        for next in range(N+1):
            if graph[here][next] and not bfs_visited[next]:
                bfs_queue.append(next)
                bfs_visited[next] = True


sys.stdin = open('BAJ1260.txt', 'r')

N, M, V = map(int, input().split())

graph = [[False for _ in range(N+1)]for __ in range(N+1)]
# DFS 함수를 위한 방문 flag
dfs_visited = [False for _ in range(N+1)]
# BFS 함수를 위한 방문 flag
bfs_visited = [False for _ in range(N+1)]

bfs_queue = deque([])


for _ in range(M):
    N1, N2 = map(int, input().split())
    graph[N1][N2] = True
    graph[N2][N1] = True

DFS(V)
print()

bfs_queue.append(V)
BFS()
```
# SWEA1238
```python
'''
Created by: minseo
Date: 4/11/24
Desc :
Excute time : ms(time.perf_counter())
'''
import time
import sys
from collections import deque


# 측정 시작
start_time = time.perf_counter()

sys.stdin = open("SWEA1238.txt", "r")


def BFS():
    while queue:
        final = 0
        here = queue.popleft()
        visited[here] = True
        # print(here)
        for next in range(1, 101):
            if graph[here][next] and not visited[next]:
                final = max(final, next)
                queue.append(next)
                visited[next] = True
                distance[next] = distance[here] + 1
    return final




for tc in range(1, 11):
    lenth, start_point = map(int, input().split())
    info_list = list(map(int, input().split()))
    queue = deque([])

    graph = [[0 for _ in range(101)]for __ in range(101)]
    visited = [False] * 101
    parent = [False] * 101
    distance = [False] * 101

    for i in range(0, lenth, 2):
        start, end = info_list[i], info_list[i+1]
        graph[start][end] = True

    distance[start_point] = 1
    queue.append(start_point)
    BFS()

    max_dis = max(distance)

    # 가장 거리가 먼 값들의 리스트
    max_dis_index = []
    for index, value in enumerate(distance):
        # 최대거리 = 값인 친구들의 인덱스 구하기
        if value == max_dis:
            max_dis_index.append(index)

    print(f"#{tc} {max(max_dis_index)}")



# 측정 종료 시간
end_time = time.perf_counter()
# 실행 시간 출력
print(f"실행 싯간: {(end_time - start_time) * 1000:.7f} milliseconds")

```
# BAJ1325
```python
'''
Created by: minseo
Date: 4/14/24
Desc : 백준 1325
Excute time : 84ms(백준)
'''
import time

# 측정 시작
start_time = time.perf_counter()

import sys
from collections import deque


def BFS():
    while myQueue:
        node = myQueue.popleft()
        for i in range(4):
            next_x, next_y = node[0] + dx[i], node[1] + dy[i]
            # 맵을 벗어날 경우 패스
            if next_x < 0 or next_y < 0 or next_x >= width or next_y >= length:
                continue
            # 범위 내에 있을 경우에만 graph와 visited 확인
            if graph[next_y][next_x] and not visited[next_y][next_x]:
                myQueue.append((next_x, next_y))
                distance[next_y][next_x] = distance[node[1]][node[0]] + 1
                visited[next_y][next_x] = True


sys.stdin = open("BAJ1325.txt")
length, width = map(int, input().split())

# 그래프 생성
graph = [[0 for _ in range(width)] for __ in range(length)]
visited = [[False for _ in range(width)] for __ in range(length)]
distance = [[1 for _ in range(width)] for __ in range(length)]
visited[0][0] = True
# queue 자료구조 생성
myQueue = deque([])

for i in range(length):
    graph[i] = list(map(int, list(input().strip())))

# 좌 우 위 아래 정의
dx = [-1, 1, 0, 0]
dy = [0, 0, 1, -1]

myQueue.append((0, 0))
BFS()
print(distance[length - 1][width - 1])

# 측정 종료 시간
end_time = time.perf_counter()
# 실행 시간 출력
print(f"실행 싯간: {(end_time - start_time) * 1000:.7f} milliseconds")

```
- queue에 넣는 형식을 생각한다고 꽤 많은 시간이 걸렸던 것 같다.
#